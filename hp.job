#!/bin/bash

#SBATCH --exclusive
#SBATCH --nodes=1
#SBATCH --tasks-per-node=1
#SBATCH --gpus-per-task=1

#SBATCH --job-name=hp 
#SBATCH --output=%x.%j.out      # Name of output file (%j expands to jobId)
#SBATCH --cpus-per-task=8        # Schedule 8 cores (includes hyperthreading)
#SBATCH --gres=gpu:a30:1        # Schedule a GPU, or more with gpu:2 etc

#SBATCH --time=24:00:00          # Run time (hh:mm:ss) - run for one hour max
#SBATCH --partition=brown   # Run on either the Red or Brown queue
#SBATCH --mail-type=END

# Getting the node names
nodes=$(scontrol show hostnames "$SLURM_JOB_NODELIST")
nodes_array=($nodes)

head_node=${nodes_array[0]}
head_node_ip=$(srun --nodes=1 --ntasks=1 -w "$head_node" hostname --ip-address)

# if we detect a space character in the head node IP, we'll
# convert it to an ipv4 address. This step is optional.
if [[ "$head_node_ip" == *" "* ]]; then
IFS=' ' read -ra ADDR <<<"$head_node_ip"
if [[ ${#ADDR[0]} -gt 16 ]]; then
  head_node_ip=${ADDR[1]}
else
  head_node_ip=${ADDR[0]}
fi
echo "IPV6 address detected. We split the IPV4 address as $head_node_ip"
fi

port=6379
ip_head=$head_node_ip:$port
export ip_head
echo "IP Head: $ip_head"

echo "Starting HEAD at $head_node"
srun --nodes=1 --ntasks=1 -w "$head_node" \
    ray start --head --node-ip-address="$head_node_ip" --port=$port \
    --num-cpus "${SLURM_CPUS_PER_TASK}" --num-gpus "${SLURM_GPUS_PER_TASK}" --block &

# optional, though may be useful in certain versions of Ray < 1.0.
sleep 10

# number of nodes other than the head node
worker_num=$((SLURM_JOB_NUM_NODES - 1))

for ((i = 1; i <= worker_num; i++)); do
    node_i=${nodes_array[$i]}
    echo "Starting WORKER $i at $node_i"
    srun --nodes=1 --ntasks=1 -w "$node_i" \
        ray start --address "$ip_head" \
        --num-cpus "${SLURM_CPUS_PER_TASK}" --num-gpus "${SLURM_GPUS_PER_TASK}" --block &
    sleep 5
done


DATASET="2k"
EVAL_DATASET=${DATASET}_test
TRAIN_EPOCHS=5
TAG_SCHEME="io"
ENSEMBLE_MODELS=5
ENSEMBLE_EPOCHS=10
SELF_EPOCHS=5

while [[ $# -gt 0 ]]; do
  case $1 in
    -d|--dataset)
      DATASET="$2"
      shift # past argument
      shift # past value
      ;;
    -e|--eval_dataset)
      EVAL_DATASET="$2"
      shift # past argument
      shift # past value
      ;;
    -te|--train_epochs)
      TRAIN_EPOCHS="$2"
      shift # past argument
      shift # past value
      ;;
    -ts|--tag_scheme)
      TAG_SCHEME="$2"
      shift # past argument
      shift # past value
      ;;
    -em|--ensemble_models)
      ENSEMBLE_MODELS="$2"
      shift # past argument
      shift # past value
      ;;
    -ee|--ensemble_epochs)
      ENSEMBLE_EPOCHS="$2"
      shift # past argument
      shift # past value
      ;;
    -se|--self_train_epochs)
      SELF_EPOCHS="$2"
      shift # past argument
      shift # past value
      ;;
    *)
      echo "Invalid argument: $1"
      shift # past argument
      ;;
  esac
done

echo "Running on $(hostname):"

module load Anaconda3/
eval "$(conda shell.bash hook)"
conda activate 2yp
bash src/sh/hp.sh -d $DATASET -e $EVAL_DATASET -te $TRAIN_EPOCHS -ts $TAG_SCHEME -em $ENSEMBLE_MODELS -ee $ENSEMBLE_EPOCHS -se $SELF_EPOCHS
